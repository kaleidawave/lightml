name: Rust

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  CACHE_PATHS: |
    ~/.cargo/bin/
    ~/.cargo/registry/index/
    ~/.cargo/registry/cache/
    ~/.cargo/git/db/
    target/

jobs:
  validity:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: ${{ env.CACHE_PATHS }}
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Check source is valid
      run: cargo check --workspace

  formating:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Check formatting with rustfmt
      run: cargo fmt --all --check
    - uses: brndnmtthws/rust-action-cargo-binstall@v1
      with:
        packages: taplo-cli
    - name: Check TOML formatting with taplo
      run: |
        taplo fmt --check **/*/Cargo.toml

  tests:
    needs: validity
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: ${{ env.CACHE_PATHS }}
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run all tests
      run: cargo test --workspace --verbose --all-features
      shell: bash

    - name: Run some examples
      shell: bash
      continue-on-error: true
      run: |
        sites=(
          "https://www.bbc.co.uk/news"
          "https://en.wikipedia.org/wiki/Main_Page"
          "https://github.com/"
        )

        for url in "${sites[@]}"; do
          curl -sS $url > out.html
          { cargo run --example main out.html --check } || echo "Could not parse source @ $url"
        done

  clippy:
    needs: validity
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: ${{ env.CACHE_PATHS }}
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Lint code with clippy
      run: cargo clippy

  publish-ability:
    runs-on: ubuntu-latest
    if: false
    steps:
    - uses: actions/checkout@v4
    - name: Check that it will publish to crates
      run: |
        cargo metadata --offline --format-version 1 --no-deps | jq -r ".workspace_members[]" | while read -r _n _v pathInfo ; do
          cd ${pathInfo:13:-1}
          cargo publish --no-verify --dry-run
        done
      shell: bash
